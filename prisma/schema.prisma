datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "fullTextIndex"] // enable full-text search
}

// create the Course schema here
model Course {
  id          String  @id @default(uuid()) // this is the primary key
  userId      String
  title       String  @db.Text
  description String? @db.Text
  imageUrl    String? @db.Text
  price       Float?
  isPublished Boolean @default(false)

  categoryId String?   // categoryId references the id field in the Category model below 
  category   Category? @relation(fields: [categoryId], references: [id]) // this is the foreign key


  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // create the back-relationships to the other models
  chapters    Chapter[]
  attachments Attachment[]
  purchases   Purchase[]

  @@index([categoryId]) // create an index on the categoryId field
  @@fulltext([title])  // enable full-text search on the title field
}

model Category {
  id      String   @id @default(uuid()) // this is the primary key
  name    String   @unique
  courses Course[]
}

model Attachment {
  id   String @id @default(uuid())
  name String
  url  String @db.Text

  courseId String // this is the foreign key
  course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade)
  // courseId references the id field in the Course model

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([courseId])
}

// what is a foreign key?
// a foreign key is a column or group of columns in a relational database table that provides a link between data in two tables. It acts as a cross-reference between tables because it references the primary key of another table, thereby establishing a link between them.

model Chapter {
  id          String  @id @default(uuid()) // this is the primary key
  title       String
  description String? @db.Text
  videoUrl    String? @db.Text
  position    Int
  isPublished Boolean @default(false)
  isFree      Boolean @default(false)

  muxData MuxData?

  courseId String // this is the foreign key
  course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade) // this is the foreign key

  userProgress UserProgress[] 

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([courseId])
}

model MuxData {
  id         String  @id @default(uuid())
  assetId    String
  playbackId String?

  chapterId String  @unique
  chapter   Chapter @relation(fields: [chapterId], references: [id], onDelete: Cascade) // establish a relationship between the MuxData and Chapter models 
}

model UserProgress {
  id     String @id @default(uuid())
  userId String

  chapterId String
  chapter   Chapter @relation(fields: [chapterId], references: [id])

  completed Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, chapterId]) // create a unique index on the userId and chapterId fields
  @@index([chapterId])
}

model Purchase {
  id     String @id @default(uuid())
  userId String

  courseId String
  course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, courseId]) // create a unique index on the userId and courseId fields
  @@index([courseId])
}

model StripeCustomer {
  id               String @id @default(uuid())
  userId           String @unique
  stripeCustomerId String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
